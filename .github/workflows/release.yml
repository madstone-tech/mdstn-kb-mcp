name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release (e.g., v1.0.0)'
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Test before release
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        check-latest: true

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out ./...

    - name: Run linter
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest
        args: --timeout=5m

    - name: Check go mod tidy
      run: |
        go mod tidy
        git diff --exit-code go.mod go.sum

  release:
    name: Release binaries and Docker images
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        check-latest: true

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Install cosign
      uses: sigstore/cosign-installer@v3

    - name: Install syft (for SBOM generation)
      uses: anchore/sbom-action/download-syft@v0

    - name: Run GoReleaser
      uses: goreleaser/goreleaser-action@v6
      with:
        distribution: goreleaser
        version: '~> v2'
        args: release --clean
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # Enable experimental Docker features
        DOCKER_CLI_EXPERIMENTAL: enabled

    - name: Sign container images
      run: |
        images=$(docker manifest inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest | jq -r '.manifests[].platform | "\(.os)/\(.architecture)"' | head -2)
        for arch in $images; do
          cosign sign --yes ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-${arch#*/}
        done

  security-scan:
    name: Security scan
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
      security-events: write
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  update-readme:
    name: Update README with latest version
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Update README
      run: |
        # Extract version from tag
        VERSION=${GITHUB_REF#refs/tags/}
        
        # Update installation instructions in README
        sed -i "s/ghcr\.io\/madstone-tech\/kbvault:[v0-9.-]*/ghcr.io\/madstone-tech\/kbvault:${VERSION}/g" README.md
        
        # Check if there are changes
        if git diff --quiet README.md; then
          echo "No changes to README.md"
          exit 0
        fi

    - name: Commit README updates
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add README.md
        git commit -m "docs: update README with latest version ${GITHUB_REF#refs/tags/}" || exit 0
        git push

  notify:
    name: Notify on completion
    needs: [test, release, security-scan, update-readme]
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Notify success
      if: needs.test.result == 'success' && needs.release.result == 'success'
      run: |
        echo "✅ Release completed successfully!"
        echo "Version: ${GITHUB_REF#refs/tags/}"
        echo "Docker images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${GITHUB_REF#refs/tags/}"

    - name: Notify failure
      if: needs.test.result == 'failure' || needs.release.result == 'failure'
      run: |
        echo "❌ Release failed!"
        echo "Test result: ${{ needs.test.result }}"
        echo "Release result: ${{ needs.release.result }}"
        exit 1